雪崩效应： 一种因为服务提供者的不可用导致服务调用者不可用，并将不可用情况逐渐放大的过程

形成过程：

    服务提供者不可用：
    硬件故障，硬件损坏，服务器宕机，网络硬件故障，造成不可用
    程序bug
    缓存击穿：大量请求同一个key此处key过期，导致loder到DB造成服务提供者过载导致不可用
    用户大量请求：

重试加大流量：
    用户重试：用户不断刷新页面
    代码逻辑重试：服务调用端存在服务异常之后的重试逻辑

服务调用者不可用：
    同步调用等待造成资源耗尽，服务调用者此时也不可用，造成服务雪崩


Hystrix隔离工作原理


    线程池隔离：Hystrix隔离方式采用线程/信号量的方式，通过隔离限制依赖的并发量和阻塞扩散
    线程隔离： hystrix在每一个依赖调用分配了一个线程池，单线程池满了调用将会立即被拒绝，默认采用不排队，加速失败判定，线程数是可以被设定的。
    原理： 用户请求将不直接依赖于服务本身，而是通过线程池中空闲线程来范文服务，如果线程池已满，择进行降级处理，用户请求不会被阻塞，至少可以有一个执行结果，例如友好的提示，而不是无休止的等待知道系统奔溃
    信号隔离：类似信号量的一个使用，用于限制并发访问，反正阻塞扩散，与线程隔离最大不同在于执行依赖代码的线程依然是请求线程
    (该线程需要通过信号申请，如果客户端是可以信的且可以快速放回，可以使用信号隔离代替线程隔离，降低开销)，信号量大小可以动态调整

    线程池隔离和信号量隔离的区别：

        线程池隔离需要开启新的线程势必会更消耗资源，但是请求的速度快
        信号量隔离不用开启新线程，资源占用少，但是请求速度要慢些


如果只是解决网络抖动问题，我们可以使用重试机制，可以不使用hystrix



