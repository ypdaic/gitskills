id   字段：
     值越大，越先执行，相同，从上到下执行
selete_type 字段类型:
     SIMPLE：简单的select查询，查询中不包含子查询或UNION
     PRIMARY:查询中包含任何复杂的子部分，最外层查询则被标记为PRIMARY
     SUBQUERY:select,where 中包含的子查询
     DERIVED:在from列表中包含子查询的则被标记为DERIVED（衍生）
     UNION:若第二个select出现在union之后，则被标记为union
     UNION RESULT:从UNION表获取结果的SELECT
type 字段值类型：
    system 最快：不进行磁盘 IO
    const：PK 或者 unique 上的等值查询
    eq_ref：PK 或者 unique 上的 join 查询，等值匹配，对于前表的每一行，后表只有一行命中
    ref：非唯一索引，等值匹配，可能有多行命中
    range：索引上的范围扫描，例如：between、in、>
    index：索引上的全集扫描，例如：InnoDB 的 count
    ALL 最慢：全表扫描

possible_keys:可能使用的索引
key:实际使用的索引
key_len:索引长度（和字符集，数据长度，是否为null相关）计算方式就是字段类型所占用的字节数+是否为null
                (为null，则加1)
                比如：int 类型占用4个字节，如果允许为null,则key_len为5
                char类型，且编码个utf-8，每个字符占用3个字段，如果容许为null,则加上1
                vachar类型，且编码格式为utf-8，每个字符占用3个字节，如果容许为null，则加2

        复合索引，key_len的计算，就是用到的索引长度之和

ref:表示引用的列，就是where条件使用了那些 列
filtered：实际显示行数占扫描rows的比例
rows:查询了多少条数据
extra:

      Using filesort  说明mysql会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行
                      读取，mysql无法使用索引的排序都叫文件排序

      Using Template 说明使用临时表

      Using index 表示用到了覆盖索引

      Using where 表示用到了where过滤

      Using join buffer 表示使用使用到了join缓存

      impossible where  表示where总是返回false

      Select tables optimized away  表示直接从表信息中就可以取到结果，不用查询

Using filesort：MySQL 对数据使用一个外部的文件内容进行了排序，而不是按照表内的索引进行排序读取。
Using temporary：使用临时表保存中间结果，也就是说 MySQL 在对查询结果排序时使用了临时表，常见于order by 或 group by。
Using index：表示 SQL 操作中使用了覆盖索引（Covering Index），避免了访问表的数据行，效率高。
Using index condition：表示 SQL 操作命中了索引，但不是所有的列数据都在索引树上，还需要访问实际的行记录。
Using where：表示 SQL 操作使用了 where 过滤条件。
Select tables optimized away：基于索引优化 MIN/MAX 操作或者 MyISAM 存储引擎优化 COUNT(*) 操作，不必等到执行阶段再进行计算，查询执行计划生成的阶段即可完成优化。
Using join buffer (Block Nested Loop)：表示 SQL 操作使用了关联查询或者子查询，且需要进行嵌套循环计算。