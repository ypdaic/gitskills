1. 脏页，干净页　
　　当内存数据页和磁盘数据页上的内容不一致时，我们称这个内存页为脏页；

　　内存数据写入磁盘后，内存页上的数据和磁盘页上的数据就一致了，我们称这个内存页为干净页。

回到顶部
2. 刷脏页的时机
2.1 redo log
　　redo  log 是循环写的，当redo log 写满了，即 write pos 追上了  checkpoint 时，此时没有空间记录 redo log，就需要将 checkpoint 向前推进，推进的这部分日志对应的脏页就需要刷入磁盘。

　　此时所有的更新全部阻塞，此时写性能跌为0，必须等待刷一部分脏页后才能继续更新，这种情况要尽量避免；

2.2 系统内存
　　当系统内存不足时，就需要将一部分数据页淘汰掉，如果淘汰的是脏页，就需要先将脏页刷入磁盘。

　　当淘汰的脏页过多时，会导致查询的响应时间变长；

2.3 MySQL认为空闲的时间
　　不存在性能问题；

2.4 MySQL正常关闭之前，会把内存中所有的脏页刷入磁盘
　　不存在性能问题；

回到顶部
3. 刷脏页的控制策略
3.1 正确服务器的IO能力
　　innodb_io_capacity参数表示机器的磁盘能力，根据机器能力合理设置该参数的值；

3.2 刷脏页的速度
　　InnoDB的刷盘速度主要参考两个参数：脏页比例和redo log 的写盘速度；

　　innodb_max_dirty_pages_pct是脏页比例上限，默认值为75%；

　　InnoDB根据当前的脏页比例算出一个值M1；

　　InnoDB每次写入redo log 有一个序号，根据当前序号和checkpoint之间的差值算出一个值M2；

　　之后引擎取M1和M2之间（M1和M2都是0-100之间的数）的较大值除以100乘以innodb_io_capacity，这就是刷脏页的速度；

3.3 刷脏页机制
　　当一个查询请求执行过程中需要先flush一个脏页时，如果脏页的旁边也是脏页，此时引擎会将相邻的脏页也刷掉，直到下一个数据页不是脏页为止；

　　该机制通过参数 innodb_innodb_flush_neighbors 控制，值为0时表示只刷自己，值为1时则有连坐效果；