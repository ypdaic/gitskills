org.apache.kafka.clients.consumer.internals.AbstractPartitionAssignor

如果是自定义分配策略的话可以继承AbstractPartitionAssignor这个类，它默认有3个实现

range

    range策略对应的实现类是org.apache.kafka.clients.consumer.RangeAssignor

    这是默认的分配策略

    可以通过消费者配置中partition.assignment.strategy参数来指定分配策略，它的值是类的全路径，是一个数组

    range策略是基于每个主题的:
        对于每个主题，我们以数字顺序排列可用分区，以字典顺序排列消费者。然后，将分区数量除以消费者总数，以确定分配给每个消费者的分区数量。
        如果没有平均划分（PS：除不尽），那么最初的几个消费者将有一个额外的分区。

        例如，假设有两个消费者C0和C1，两个主题t0和t1，并且每个主题有3个分区，分区的情况是这样的：t0p0，t0p1，t0p2，t1p0，t1p1，t1p2

        那么，基于以上信息，最终消费者分配分区的情况是这样的：

        C0: [t0p0, t0p1, t1p0, t1p1]

        C1: [t0p2, t1p2]

roundrobin（轮询）

    roundronbin分配策略的具体实现是org.apache.kafka.clients.consumer.RoundRobinAssignor

    轮询分配策略是基于所有可用的消费者和所有可用的分区的，与前面的range策略最大的不同就是它不再局限于某个主题

    如果所有的消费者实例的订阅都是相同的，那么这样最好了，可用统一分配，均衡分配

    例如，假设有两个消费者C0和C1，两个主题t0和t1，每个主题有3个分区，分别是t0p0，t0p1，t0p2，t1p0，t1p1，t1p2

    那么，最终分配的结果是这样的：

    C0: [t0p0, t0p2, t1p1]

    C1: [t0p1, t1p0, t1p2]