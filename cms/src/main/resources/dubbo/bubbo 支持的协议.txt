1: dubbo 协议

    默认就是走bubbo协议，单一长连接，NIO异步通信，基于hessian作为序列化协议，
    适用的场景：传输数据量很小（每次请求在100kb以内），但是并发量很高
    为了要支持高并发场景，一般是服务提供者就几台机器，但是服务消费者有上百台，可能每天调用量达到上亿次，此时用长连接是最合适的，就是跟每个服务
    消费者维持一个长连接就可以，可能总共就100个连接，然后后面直接基于长连接NIO通信，可以支持高并发请求

    否则如果上亿次请求每次都短连接的话，服务提供者会抗不住
    而且因为走的是单一长连接，所以传输数据量太大的话，会导致并发能力降低，所以一般建议是传输数据量小，支撑高并发访问

2：rmi 协议

    走java二进制序列化，多个短连接，适合消费和提供者数量不多，适合于文件的传输，一个较少使用

3：hessian协议

    走hessian协议，多个短连接，适用于提供者比消费者数量多，适合于文件的传输，一般较少使用

4：http协议

    走json序列化

5：webservice

    走SOAP文本协议




