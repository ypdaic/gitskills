-Xms            设置堆的最小空间大小。

-Xmx            设置堆的最大空间大小。

-XX:NewSize     设置新生代最小空间大小。

-XX:MaxNewSize  设置新生代最大空间大小。

-XX:MetaspaceSize    设置永久代最小空间大小。

-XX:MaxMetaspaceSize 设置永久代最大空间大小。

-Xss            设置每个线程的堆栈大小。

-XX:NewRatio    老年代对比新生代的空间大小, 比如2代表老年代空间是新生代的两倍大小

-XX:SurvivorRatio Eden/Survivor的比值, 默认8:2

-XX:PetenureSizeThreshold=1000000 单位为B，标明对象大小超过1M时，在老年代(tenured)分配内存空间。

-XX:+PrintGCDetails 打印gc详细信息，在进行gc时才会打印，在程序结束之后才会打印堆的相关信息

-Xlog:gc*   打印gc详细信息，在进行gc时才会打印,jdk11下用这个参数

-Xloggc:/Users/daiyanping/gc/gc.log

-XX:+HeapDumpBeforeFullGC        full gc 前打出dump文件

-XX:+HeapDumpAfterFullGC        full gc 后打出dump文件

-XX:+HeapDumpOnOutOfMemoryError   内存溢出，打出dump文件

-XX:HeapDumpPath=/Users/daiyanping/dump/heapdump.bin   dump文件的保存路径


-XX:+UseSerialGC   串行收集器

-XX:+PrintGCTimeStamps 输出GC的时间戳（以基准时间的形式）,jdk 11已不支持

-XX:+PrintGCDateStamps 输出GC的时间戳（以日期的形式，如 2017-09-04T21:53:59.234+0800）,jdk 11已不支持

-XX:+PrintHeapAtGC 在进行GC的前后打印出堆的信息，jdk 11 已不支持

-XX:MaxTenuringThreshold=15  经过15次minor gc 后进入年老代

-XX:+UseConcMarkSweepGC  采用并发gc方式 jdk9 以后的版本可能被移除

-XX:+CMSParallelRemarkEnabled 开启了降低标记停顿




-XX:GCLogFileSize=10M gc日志文件大小

-XX:NumberOfGCLogFiles=10 gc日志文件数量

-XX:+UseGCLogFileRotation  使用gc日志文件轮换

-XX:+PrintGCDateStamps

-XX:+PrintGCTimeStamps

-XX:+PrintGCDetails

-XX:+DisableExplicitGC 禁止了 System.gc()

-verbose:gc


XX:+ScavengeBeforeFullGC 在fullgc时之前进行年轻代gc


-XX:+CMSScavengeBeforeRemark   在cms remark标记阶段之前进行年轻代gc
