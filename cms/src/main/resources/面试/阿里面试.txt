在项目中对框架做过哪些扩展

    解决spring的bug
    重写mybatis的simpleexecutor，在mybatis层面解决数据源切换
    对spingcache增强
    对rabbitmq 不支持将通道绑定到当前线程上
    hyinx 基于配置中心的半自动修改规则然后同步
    fegin 在默认情况下对每个方法去设置hyrix 的熔断规则不是很方便，默认是接口名和方法名，如果需要对某几个方法使用同样的规则就不是很方便
    然后就自定义了注解，进行相关配置，然后实现seterfatory接口，解析注解获取相关配置项
    hyrinx 线程池隔离后，获取代理对象失败问题，改写hyrixn aop源码，将代理对象绑定到新开的线程上
    基于nacos的动态数据源新增


hystrix的处理流程

    如果没有触发熔断，且是线程池隔离，则会检查是否超过线程池任务处理数，如果是信号量隔离，则会检查是否能够获取信号量，不满足就走降级，
    如果都满足则会判断是否每秒超过20个请求，且失败率超过了50%，如果满足的话就会开启熔断，走降级，如果没有则正常请求
    如果已经触发熔断则会5秒中后探测一下是否请求成功，如果成功则关闭熔断，如果失败，再过5秒继续试探

你用了nacos,为什么选择了nacos

    阿里背书，项目社区活跃，集成服务注册，配置中心功能，提供环境隔离，提供优秀的UI管理界面，基于http的服务发现与注册，没有客户端限制

单体应用到微服务的过程

   项目业务体量的上升，团队人员的壮大，单体模式会妨碍持续交付，就需要进行微服务拆分


单体的优缺点：

	不够灵活： 对应用程序做任何细微的修改都需要将整个应用程序重新构建、重新部署
	妨碍持续交付：
	受技术栈限制：
	技术债务：

微服务的优缺点

	优点：逻辑清晰，简化部署，可扩展，灵活组合，技术异构，高可靠（故障隔离），应用性能得到提高
	缺点：复杂度高，运维复杂（需要监控系统），影响性能（链路调用长）


微服务如何去拆分

    单一职责，高内聚，低耦合
    先粗粒度再细粒度
    产品迭代的同时去拆分，先拆分非核心业务，减少影响

分布式锁有哪几种

使用zk两个异地机房，挂了一个，另外一个怎么保证可用

zk的协议的特点

频繁的full gc 怎么处理
    查看最新提交的代码，如果只是频繁的full gc 又没有内存溢出，是不是有很多应该在新生代的被回收的对象跑到了老年代，每次老年代回收都可以回收掉很对空间，这样的话就需要调大新生代的大小了
    如果回收的内存不多，可能存在内存泄漏问题，需要根据内存镜像进行分析了

用了这么多开源框架，你学到了什么

    解决问题方案变多了，解决问题的能力提升了，代码的抽象度提升了



你为什么选择了rabbitmq

    rabbitmq社区活跃，低延时，并发能力强，支持dir项目体量不大，团队成员技术积累考虑，用rabbitmq 足够
    公司基础技术没有强大到可以掌控roketmq


有没有了解其他的消息中间件

rabbitmq kakfa 有什么特点，区别

kafka底层的数据结构

为什么选择了nacos

除了nacos，你还知道那些注册中心，各自有什么特点

业务开发过程中遇到那些难点

说一下你的项目，项目的运作方式

项目的整体流程

说一下你的项目部署方式

团队规模