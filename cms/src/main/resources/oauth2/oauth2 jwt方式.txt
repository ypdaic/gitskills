jwt 方式获取的token，和其他方式最大的区别就是token不在保存在第三方中间件中，比如redis,数据库，而是直接将用户信息保存在token中，
    返回给前端，前端保存这个token

 配置的区别如下：



        /**
         * jwt的形式获取token
         * @return
         */
        @Bean
        public TokenStore tokenStore() {
            return new JwtTokenStore(jwtTokenEnhancer());
        }

        @Bean
        protected JwtAccessTokenConverter jwtTokenEnhancer() {
            // 配置jks文件
    //        KeyStoreKeyFactory keyStoreKeyFactory = new KeyStoreKeyFactory(new ClassPathResource("micro-jwt.jks"), "123456".toCharArray());
            JwtAccessTokenConverter converter = new JwtAccessTokenConverter();
    //        converter.setKeyPair(keyStoreKeyFactory.getKeyPair("micro-jwt"));
            converter.setSigningKey("kSUdVKL0j0JGTAIo8uY5ZNMO9nZAemg6ehgOHozK");
            return converter;
        }

        @Override
        public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {
            // redisTokenStore
    //        endpoints.tokenStore(new MyRedisTokenStore(redisConnectionFactory))
    //                .authenticationManager(authenticationManager)
    //                .allowedTokenEndpointRequestMethods(HttpMethod.GET, HttpMethod.POST);

            // 1声明token存储方式
            // 2定义了权限的校验的管理器
            // 3定义了用户校验service
            // 4定义token属性信息
            endpoints.tokenStore(tokenStore)
                    .authenticationManager(authenticationManager)
                    .userDetailsService(userServiceDetail)
                    // 运行GET，post的方式获取token
                    .allowedTokenEndpointRequestMethods(HttpMethod.GET, HttpMethod.POST);

            // 配置tokenServices参数
            DefaultTokenServices tokenServices = new DefaultTokenServices();
            tokenServices.setTokenStore(endpoints.getTokenStore());
            //支持refreshtoken
            tokenServices.setSupportRefreshToken(true);
            tokenServices.setClientDetailsService(endpoints.getClientDetailsService());
            tokenServices.setTokenEnhancer(endpoints.getTokenEnhancer());
            // token 过期时间
            tokenServices.setAccessTokenValiditySeconds(60 * 5);
            //重复使用
            tokenServices.setReuseRefreshToken(false);
            // 刷新过期时间
            tokenServices.setRefreshTokenValiditySeconds(60 * 10);

            // 配置用于JWT私钥加密的增强器，jwt模式下这里一定要配置
            tokenServices.setTokenEnhancer(jwtTokenEnhancer());
            // 设置token服务实例类，不设置默认也会提供
            endpoints.tokenServices(tokenServices);
            // 配置授权code的存储方式
            endpoints.authorizationCodeServices(jdbcAuthorizationCodeServices());
            // 配置token生成器，默认已经配置了5种，无需我们再进行配置
            endpoints.tokenGranter(null);
            // 配置Approval存储方式
            endpoints.approvalStore(jdbcApprovalStore());
        }