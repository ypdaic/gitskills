spring oath2 支持get,post 两种方式获取token,默认关闭get方式

代码如下：

    @FrameworkEndpoint
    public class TokenEndpoint extends AbstractEndpoint {

    	private OAuth2RequestValidator oAuth2RequestValidator = new DefaultOAuth2RequestValidator();

        // 默认只支持POST请求
    	private Set<HttpMethod> allowedRequestMethods = new HashSet<HttpMethod>(Arrays.asList(HttpMethod.POST));

    	@RequestMapping(value = "/oauth/token", method=RequestMethod.GET)
    	public ResponseEntity<OAuth2AccessToken> getAccessToken(Principal principal, @RequestParam
    	Map<String, String> parameters) throws HttpRequestMethodNotSupportedException {
    		if (!allowedRequestMethods.contains(HttpMethod.GET)) {
    			throw new HttpRequestMethodNotSupportedException("GET");
    		}
    		return postAccessToken(principal, parameters);
    	}

如果需要支持get请求，就需要进行自定义配置，如下

    @Override
        public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {

            // 1声明token存储方式
            // 2定义了权限的校验的管理器
            // 3定义了用户校验service
            // 4定义token属性信息
            endpoints.tokenStore(tokenStore)
                    .authenticationManager(authenticationManager)
                    .userDetailsService(userServiceDetail)
                    // 运行GET，post的方式获取token
                    .allowedTokenEndpointRequestMethods(HttpMethod.GET, HttpMethod.POST);

            // 配置tokenServices参数
            DefaultTokenServices tokenServices = new DefaultTokenServices();
            tokenServices.setTokenStore(endpoints.getTokenStore());
            //支持refreshtoken
            tokenServices.setSupportRefreshToken(true);
            tokenServices.setClientDetailsService(endpoints.getClientDetailsService());
            tokenServices.setTokenEnhancer(endpoints.getTokenEnhancer());
            // token 过期时间
            tokenServices.setAccessTokenValiditySeconds(60 * 5);
            //重复使用
            tokenServices.setReuseRefreshToken(false);
            // 刷新过期时间
            tokenServices.setRefreshTokenValiditySeconds(60 * 10);
            endpoints.tokenServices(tokenServices);
        }