CacheOperationContexts 的 determineSyncFlag

private boolean determineSyncFlag(Method method) {
            // 一个方法可以有多个缓存注解，这里是获取@Cacheable的注解
			List<CacheOperationContext> cacheOperationContexts = this.contexts.get(CacheableOperation.class);
			if (cacheOperationContexts == null) {  // no @Cacheable operation at all
			    // 如果cacheOperationContexts没有说明当前方法上没有@Cacheable的注解
			    // 所以不需要同步
				return false;
			}
			boolean syncEnabled = false;
			for (CacheOperationContext cacheOperationContext : cacheOperationContexts) {
				if (((CacheableOperation) cacheOperationContext.getOperation()).isSync()) {
				    // 只要有一个@Cacheable注解上有sync=true 就表示开启同步
					syncEnabled = true;
					break;
				}
			}
			if (syncEnabled) {
			    // 如果存在一个@Cacheable(sync=true)注解和其他缓存注解，则抛异常
				if (this.contexts.size() > 1) {
					throw new IllegalStateException(
							"@Cacheable(sync=true) cannot be combined with other cache operations on '" + method + "'");
				}
				// 如果存在多个@Cacheable(sync=true)注解，也抛异常
				if (cacheOperationContexts.size() > 1) {
					throw new IllegalStateException(
							"Only one @Cacheable(sync=true) entry is allowed on '" + method + "'");
				}
				CacheOperationContext cacheOperationContext = cacheOperationContexts.iterator().next();
				CacheableOperation operation = (CacheableOperation) cacheOperationContext.getOperation();
				// 如果存在一个@Cacheable(sync=true, cacheNames=["test", "test2"]) 缓存名称存在多个抛异常
				if (cacheOperationContext.getCaches().size() > 1) {
					throw new IllegalStateException(
							"@Cacheable(sync=true) only allows a single cache on '" + operation + "'");
				}
				// 如果存在一个@Cacheable(sync=true, unless="#id") 存在unless 抛异常
				if (StringUtils.hasText(operation.getUnless())) {
					throw new IllegalStateException(
							"@Cacheable(sync=true) does not support unless attribute on '" + operation + "'");
				}
				return true;
			}
			return false;
		}
	}