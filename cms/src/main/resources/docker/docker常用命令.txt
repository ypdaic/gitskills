启动docker(liunx): service docker start

查看docker容器使用资源情况：docker stats

查看docker信息：docker info

查看镜像：docker images

查看已经存在的容器：docker ps -a

查看容器信息：docker  inspect  容器id

查看运行的容器：docker ps

停止运行的容器：docker stop 容器id

启动已停止的容器：docker start 容器id

通过镜像启动容器：docker run -p 8080:80 -d -m 镜像名称   -m:设置容器内存最大值

容器删除：docker rm -v 容器id （确保容器已经停止,-v表示删除数据）

镜像删除：docker rmi 镜像id （确保由该镜像产生的容器已经删除）

通过已存在的dockerfile文件制作镜像：docker build -t myimages . -f springbootdockerfile  (-t  指定镜像名称 -f 指定dockerfile名称 前面的.表示dockerfile的路径)

将本地文件拷贝到docker容器中：docker cp hello.sh df://opt （df 表示容器id，//opt 表示目录）

保存容器的修改：docker commit -m "保存修改" df mofify_nginx （保存容器的修改会生成新的镜像，df 表示容器id，后面跟的是新镜像的名称）

导出镜像到文件：$ docker save -o nginx-alpine.tar nginx:alpine

从文件中加载镜像：$ docker load -i nginx-alpine.tar

创建dockerfile : dockerfile 语法
命令     用途
FROM     base image
RUN      执行命令
ADD      添加文件，带解压功能 （本地文件或远程文件）
COPY     拷贝文件
CMD      执行文件
EXPOSE   暴露端口
WORKDIR  指定路径
MAINTAINER  维护者
ENV       设置环境变量
ENTRYPOINT  容器入口  (与cmd差不多，如果指定了ENTRYPOINT和CMD 则CMD指定的是ENTRYPOINT的参数)
USER      指定用户
VOLUME    mount ponit

查看容器日志：docker logs -f 容器id

进入到容器：docker exec -it 容器id bash

设置容器运行的环境变量：使用-e 环境变量名=值  例：docker run -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql  这里用来指定mysql的root密码，设置哪些环境变量由镜像提供

运行mysql这样的容器时，会创建默认的数据卷，删除容器后，必须我们自己手动删除，也可以在启动时带上 --rm 参数，表示容器删除时自动删除数据卷

可以在没有任何容器的前提下创建数据卷

创建实名数据卷
docker volume create my-vol

创建匿名卷
docker volume create

查看数据卷列表
docker volume ls

查看具体的数据卷
docker volume inspect my-vol

删除数据卷

docker volume rm my-vol

使用数据卷
docker run --name nginx -d -v my-vol:/opt/my-vol nginx:alpine

从容器内部连接mysql
docker exec -it mysql1 mysql -uroot -p123456

查看容器历史：
docker history centos:7

    结果：这个镜像由3个层组成
    IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT
    1e1148e4cc2c        12 months ago       /bin/sh -c #(nop)  CMD ["/bin/bash"]            0B
    <missing>           12 months ago       /bin/sh -c #(nop)  LABEL org.label-schema.sc…   0B
    <missing>           12 months ago       /bin/sh -c #(nop) ADD file:6f877549795f4798a…   202MB

资源限制
-cpuset-cpus用于设置容器可以使用的 vCPU 核。-c,--cpu-shares用于设置多个容器竞争 CPU 时，各个容器相对能分配到的 CPU 时间比例。假设有三个正在运行的容器，这三个容器中的任务都是 CPU 密集型的。第一个容器的 cpu 共享权值是 1024，其它两个容器的 cpu 共享权值是 512。第一个容器将得到 50% 的 CPU 时间，而其它两个容器就只能各得到 25% 的 CPU 时间了。如果再添加第四个 cpu 共享值为 1024 的容器，每个容器得到的 CPU 时间将重新计算。第一个容器的CPU 时间变为 33%，其它容器分得的 CPU 时间分别为 16.5%、16.5%、33%。必须注意的是，这个比例只有在 CPU 密集型的任务执行时才有用。在四核的系统上，假设有四个单进程的容器，它们都能各自使用一个核的 100% CPU 时间，不管它们的 cpu 共享权值是多少。
docker run --cpuset-cpus="0-3" --cpu-shares=512 --memory=500m nginx:alpine

主机拷贝到容器
docker cp /tmp/test.txt nginx:/tmp

容器拷贝到主机
docker cp nginx:/tmp/test.txt ./

删除所有容器
docker rm -f `docker ps -aq`

若有时遇到容器启动失败的情况，可以先使用相同的镜像启动一个临时容器，先进入容器
docker exec -ti --rm <image_id> bash