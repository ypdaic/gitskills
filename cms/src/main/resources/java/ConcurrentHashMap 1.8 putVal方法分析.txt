/** Implementation for put and putIfAbsent */
    final V putVal(K key, V value, boolean onlyIfAbsent) {
        if (key == null || value == null) throw new NullPointerException();
        // 计算key的hash
        int hash = spread(key.hashCode());
        int binCount = 0;
        // 使用while(true)的方式进行put
        for (Node<K,V>[] tab = table;;) {
            Node<K,V> f; int n, i, fh;
            // 如果tab 为空，或者长度为0就进行tab的初始化，多线程下保证只会有一个线程进行初始化
            if (tab == null || (n = tab.length) == 0)
                tab = initTable();
            // 如果对tab的长度取模后得到的索引位置的node为空
            else if ((f = tabAt(tab, i = (n - 1) & hash)) == null) {
                // 使用cas保证只有一个线程创建node,并将node放到tab对应的索引下，没有进行node创建的线程则再次走循环走到最后的else环节
                if (casTabAt(tab, i, null,
                             new Node<K,V>(hash, key, value, null)))
                    break;                   // no lock when adding to empty bin
            }
            // 如果node存在，且hash值为moved表示当前存在其他线程在进行扩容，这里就需要进行协助扩容
            else if ((fh = f.hash) == MOVED)
                tab = helpTransfer(tab, f);
            else {
                V oldVal = null;
                // 如果node 不为空，使用synchronized同步这个node，保证线程安全
                synchronized (f) {
                    // 保证同步的头结点
                    if (tabAt(tab, i) == f) {
                        // hash 大于0 说明还是链表
                        if (fh >= 0) {
                            binCount = 1;
                            for (Node<K,V> e = f;; ++binCount) {
                                K ek;
                                // 如果key相同就覆盖旧值
                                if (e.hash == hash &&
                                    ((ek = e.key) == key ||
                                     (ek != null && key.equals(ek)))) {
                                    oldVal = e.val;
                                    if (!onlyIfAbsent)
                                        e.val = value;
                                    break;
                                }
                                Node<K,V> pred = e;
                                // 取出头结点的next结点进行下次循环
                                if ((e = e.next) == null) {
                                    // 如果key 不相同且，该node没有后续node,则创建一个新的node添加到尾部
                                    pred.next = new Node<K,V>(hash, key,
                                                              value, null);
                                    break;
                                }
                            }
                        }
                        // hash 小于0，且node是TreeBin表示是红黑树
                        else if (f instanceof TreeBin) {
                            Node<K,V> p;
                            binCount = 2;
                            if ((p = ((TreeBin<K,V>)f).putTreeVal(hash, key,
                                                           value)) != null) {
                                oldVal = p.val;
                                if (!onlyIfAbsent)
                                    p.val = value;
                            }
                        }
                    }
                }
                if (binCount != 0) {
                    // 如果binCount 大于8就需要转红黑树处理
                    if (binCount >= TREEIFY_THRESHOLD)
                        treeifyBin(tab, i);
                    if (oldVal != null)
                        return oldVal;
                    break;
                }
            }
        }
        addCount(1L, binCount);
        return null;
    }