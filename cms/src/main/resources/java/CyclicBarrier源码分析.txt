/**
     * Main barrier code, covering the various policies.
     */
    // 使用ReentrantLock 和 Condition 实现
    private int dowait(boolean timed, long nanos)
        throws InterruptedException, BrokenBarrierException,
               TimeoutException {
        final ReentrantLock lock = this.lock;
        lock.lock();
        try {
            final Generation g = generation;

            if (g.broken)
                throw new BrokenBarrierException();

            if (Thread.interrupted()) {
                breakBarrier();
                throw new InterruptedException();
            }

            int index = --count;
            // 当index为0后，判断是否有后置任务，如果有就执行后置任务
            if (index == 0) {  // tripped
                boolean ranAction = false;
                try {
                    final Runnable command = barrierCommand;
                    if (command != null)
                        command.run();
                    ranAction = true;
                    // 释放全部在condition等待的线程
                    nextGeneration();
                    return 0;
                } finally {
                    if (!ranAction)
                        breakBarrier();
                }
            }

            // loop until tripped, broken, interrupted, or timed out
            for (;;) {
                try {
                    // 如果是调用await方法，使用condition在这里阻塞，前提是index还没有减到0
                    if (!timed)
                        trip.await();
                    else if (nanos > 0L)
                        nanos = trip.awaitNanos(nanos);
                } catch (InterruptedException ie) {
                    if (g == generation && ! g.broken) {
                        breakBarrier();
                        throw ie;
                    } else {
                        // We're about to finish waiting even if we had not
                        // been interrupted, so this interrupt is deemed to
                        // "belong" to subsequent execution.
                        Thread.currentThread().interrupt();
                    }
                }

                if (g.broken)
                    throw new BrokenBarrierException();
                // 线程阻塞释放后，释放锁后，在这里就返回了
                if (g != generation)
                    return index;

                if (timed && nanos <= 0L) {
                    breakBarrier();
                    throw new TimeoutException();
                }
            }
        } finally {
            lock.unlock();
        }
    }


    总结：使用ReentrantLock 和 Condition 实现，在调用await方法时，先获取锁，然后判断count是否等待0，如果不等于0，就使用condition进行阻塞，
         当最后一个线程调用await方法时，判断count等于0，先释放所有在condition阻塞的线程，然后变更generation，最后释放锁，锁释放后那些被释放的线程会去抢锁，抢到锁的线程会去
         判断之前的generation和现在的generation是否相等，很明显已经不等，就直接返回，然后释放锁，排在同步队列最前面的节点就会获取锁，直到所有等待的节点执行完成。