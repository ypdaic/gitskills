wget https://github.com/doujiang24/lua-resty-kafka/archive/v0.09.tar.gz

 mv v0.09.tar.gz lua-resty-kafka.tar.gz

 tar -zxvf lua-resty-kafka.tar.gz

将kafka目录拷贝到/usr/local/openresty/lualib/resty目录下

 cp -R /root/docker/openresty-application/lualib/lua-resty-kafka-0.09/lib/resty/kafka ./resty/kafka

 # kafka 使用
 local cjson = require("cjson");
 local producer = require("resty.kafka.producer");

 local broker_list = {
         {host = "192.168.109.129", prot = 9092},
         {host = "192.168.109.130", port = 9092}
         }

 local log_json = {};
 log_json["request_moudule"] = "product_detail_info"
 log_json["headers"] = ngx.req.get_headers()
 log_json["uri_args"] = ngx.req.get_uri_args()
 log_json["body"] = ngx.req.read_body()
 log_json["http_version"] = ngx.req.http_version()
 log_json["method"] = ngx.req.get_method()
 log_json["raw_header"] = ngx.req.raw_header()
 log_json["body_data"] = ngx.req.get_body_data()

 local message = cjson.encode(log_json);
 local uri_args = ngx.req.get_uri_args()
 local productId = uri_args["productId"]

 #kafka异步发送
 local async_producer = producer:new(broker_list, {producer_type = "async"})
 local ok, err = async_producer:send("access_log", productId, message)

 if not ok then
         ngx.log(ngx.ERR, "kafka send err:", err)
         return
 end

 local shopId = uri_args["shopId"]

 local cache_ngx = ngx.shared.my_cache

 local productCacheKey = "product_info_"..productId
 local shopCacheKey = "shop_info_"..shopId

 local productCache = cache_ngx:get(productCacheKey)
 local shopCache = cache_ngx:get(shopCacheKey)

 if productCache == "" or productCache == nil then
         local http = require("resty.http")
         local httpc = http.new()

         local resp, err = httpc:request_uri("http://192.168.109.1:8081",{
                 method = "GET",
                 path = "/openresty/product?productId="..productId
         })

         productCache = resp.body
         cache_ngx:set(productCacheKey, productCache, 10 * 60)
         httpc:close();
 end

 if shopCache == "" or shopCache == nil then
         local http = require("resty.http")
         local httpc = http.new()

         local resp, err = httpc:request_uri("http://192.168.109.1:8081",{
                 method = "GET",
                 path = "/openresty/shop?shopId="..shopId
         })

         shopCache = resp.body
         cache_ngx:set(shopCacheKey, shopCache, 10 * 60)
         httpc:close()
 end
 ngx.say(productCache, shopCache);
