1:

    做到单一服务内部功能的高内聚，和低耦合。也就是说，每个服务只完成自己职责之内的任务，对于不是自己职责的功能，交给其它服务来完成

2:

    你需要关注服务拆分的粒度，先粗略拆分，再逐渐细化。在服务拆分的初期，你其
    实很难确定，服务究竟要拆分成什么样。但是，从“微服务”这几个字来看，服务的粒度貌
    似应该足够小，甚至有“一方法一服务”的说法。不过，服务多了也会带来问题，像是服务
    个数的增加会增加运维的成本。再比如，原本一次请求只需要调用进程内的多个方法，现在
    则需要跨网络调用多个 RPC 服务，在性能上肯定会有所下降。

    拆分初期可以把服务粒度拆的粗一些，后面随着团队对于业务和微服
    务理解的加深，再考虑把服务粒度细化。比如说，对于一个社区系统来说，你可以先把和用
    户关系相关的业务逻辑，都拆分到用户关系服务中，之后，再把比如黑名单的逻辑独立成黑
    名单服务。

3:

    拆分的过程，要尽量避免影响产品的日常功能迭代，也就是说，要一边做产品功能
    迭代，一边完成服务化拆分。

    1. 优先剥离比较独立的边界服务（比如短信服务、地理位置服务），从非核心的服务出
    发，减少拆分对现有业务的影响，也给团队一个练习、试错的机会；
    2. 当两个服务存在依赖关系时，优先拆分被依赖的服务。比方说，内容服务依赖于用户服
    务获取用户的基本信息，那么如果先把内容服务拆分出来，内容服务就会依赖于一体化架构
    中的用户模块，这样还是无法保证内容服务的快速部署能力。
