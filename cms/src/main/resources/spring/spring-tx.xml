<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
    http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.2.xsd"
       default-lazy-init="false">

    <bean id="propertyConfigurerForProject"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="order" value="1"/>
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="location">
            <value>classpath:config/core/core.properties</value>
        </property>
    </bean>

    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="${jdbc.driverClassName}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="minPoolSize" value="10"/>
        <property name="maxPoolSize" value="100"/>
        <property name="maxIdleTime" value="1800"/>
        <property name="acquireIncrement" value="3"/>
        <property name="maxStatements" value="1000"/>
        <property name="initialPoolSize" value="10"/>
        <property name="idleConnectionTestPeriod" value="60"/>
        <property name="acquireRetryAttempts" value="30"/>
        <property name="breakAfterAcquireFailure" value="false"/>
        <property name="testConnectionOnCheckout" value="false"/>
        <property name="acquireRetryDelay">
            <value>100</value>
        </property>
    </bean>
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--@Transactional-->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations">
            <value>classpath:xml/*Mapper.xml</value>
        </property>
        <!--<property name="databaseIdProvider" ref="databaseIdProvider" />-->
        <!--<property name="plugins">
                <array>
                    <bean class="com.zhuguang.jack.mybatisInterceptor.ExectorInterceptor"></bean>
                    <bean class="com.zhuguang.jack.mybatisInterceptor.PageInterceptor"></bean>
                    <bean class="com.zhuguang.jack.mybatisInterceptor.ResultSetCacheInterceptor"></bean>
                </array>
            </property>
        <property name="plugins">
            <array>
                <bean class="com.zhuguang.jack.mybatisInterceptor.MyPubResultSetHandler"></bean>
                <bean class="com.zhuguang.jack.mybatisInterceptor.CacheExecutorPlugin"></bean>
            </array>
        </property>-->
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="annotationClass" value="org.springframework.stereotype.Repository"/>
        <property name="basePackage" value="com.zhuguang.jack.dao"/>

        <!--这样会导致property-placeholder加载配置文件失效
            <property name="sqlSessionFactory" ref="sqlSessionFactory"/>-->

        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>


<!--    <tx:advice id="userTxAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            &lt;!&ndash;只有目标方法是save开头的才会有事务属性&ndash;&gt;
            &lt;!&ndash;<tx:method name="save*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.RuntimeException" isolation="DEFAULT"/>&ndash;&gt;
            <tx:method name="saveTest" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.RuntimeException" isolation="DEFAULT"/>
            <tx:method name="saveTest1" propagation="NESTED" read-only="false"
                       rollback-for="java.lang.RuntimeException" isolation="DEFAULT"/>
            <tx:method name="delete*" propagation="NESTED" read-only="false"
                       rollback-for="java.lang.RuntimeException"/>
            <tx:method name="update*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.RuntimeException"/>
            <tx:method name="check*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.RuntimeException"/>
            <tx:method name="print*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.RuntimeException"/>
            <tx:method name="*" propagation="REQUIRED" read-only="false" isolation="DEFAULT"
                       rollback-for="java.lang.RuntimeException"/>
        </tx:attributes>
    </tx:advice>
    <aop:config proxy-target-class="false">
        <aop:pointcut id="pc"
                      expression="execution(public * com.zhuguang.jack.service..*.*(..))"/>
        <aop:advisor pointcut-ref="pc" advice-ref="userTxAdvice"/>
    </aop:config>-->
</beans>