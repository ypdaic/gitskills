②一致性 Hash 算法
    既然要将数据进行分片，那么通常的做法就是获取节点的 Hash 值，然后根据节点数求模。

    但这样的方法有明显的弊端，当 Redis 节点数需要动态增加或减少的时候，会造成大量的 Key 无法被命中。所以 Redis 中引入了一致性 Hash 算法。

    该算法对 2^32 取模，将 Hash 值空间组成虚拟的圆环，整个圆环按顺时针方向组织，每个节点依次为 0、1、2…2^32-1。
    （ 取2的32次方是有依据的，IPV4最大的数量就是2的32次方，这样就能保证所有的ip地址来取余不会重复。一一对应哈希环上面的正数）

    之后将每个服务器进行 Hash 运算，确定服务器在这个 Hash 环上的地址，确定了服务器地址后，对数据使用同样的 Hash 算法，将数据定位到特定的 Redis 服务器上。

    如果定位到的地方没有 Redis 服务器实例，则继续顺时针寻找，找到的第一台服务器即该数据最终的服务器位置。

③Hash 环的数据倾斜问题
    Hash 环在服务器节点很少的时候，容易遇到服务器节点不均匀的问题，这会造成数据倾斜，数据倾斜指的是被缓存的对象大部分集中在 Redis 集群的其中一台或几台服务器上。
    此时通过虚拟节点的方式可以让节点分布的更均匀


http://www.zsythink.net/archives/1182/