package ${package.Controller};


import org.springframework.web.bind.annotation.RequestMapping;

#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

import ${package.Service}.${table.serviceName};
import ${dtoPackage}.${entity}Dto;

import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.beans.factory.annotation.Autowired;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.apache.commons.lang3.StringUtils;
import sungo.util.enums.FailureEnum;
import sungo.util.result.Result;
import sungo.util.result.ResultUtil;
#if(${AccountToken})
import sungo.cms.entity.AccountToken;
import javax.servlet.http.HttpServletRequest;
#end
#if(${SysAccountToken})
import sungo.manager.entity.SysAccountToken;
import sungo.manager.annotation.Token;
#end

/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

    @Autowired
    ${table.serviceName} ${serviceLowerName};

    /**
     *
     * 新增${table.comment}
     * @param ${entityLowerName}Dto
     * @param#if(${AccountToken}) httpServletRequest #elseif (${SysAccountToken}) token #else httpServletRequest #end
     * @return
     */
    @PostMapping("/add")
    public Result add(@RequestBody @Validated ${entity}Dto ${entityLowerName}Dto, BindingResult bindingResult,#if(${AccountToken}) HttpServletRequest httpServletRequest#elseif(${SysAccountToken}) @Token SysAccountToken token#else HttpServletRequest httpServletRequest#end) {
        if (bindingResult.hasErrors()) {
            return paramError(bindingResult);
        }

        #if(${AccountToken})
        AccountToken token = getUserToken(httpServletRequest);
        #end
        ${entity} ${entityLowerName} = ${table.serviceName}.add(${entityLowerName}Dto, token);

        return ResultUtil.successOfInsert(${entityLowerName});
    }

    /**
     *
     * 修改${table.comment}
     * @param ${entityLowerName}Dto
     * @param#if(${AccountToken}) httpServletRequest #elseif (${SysAccountToken}) token #else httpServletRequest #end
     * @return
     */
    @PostMapping("/update")
    public Result update(@RequestBody @Validated ${entity}Dto ${entityLowerName}Dto, BindingResult bindingResult,#if(${AccountToken}) HttpServletRequest httpServletRequest#elseif(${SysAccountToken}) @Token SysAccountToken token#else HttpServletRequest httpServletRequest#end) {
        if (bindingResult.hasErrors()) {
            return paramError(bindingResult);
        }
        #if(${AccountToken})
        AccountToken token = getUserToken(httpServletRequest);
        #end
        ${entity} ${entityLowerName} = ${table.serviceName}.update(${entityLowerName}Dto, token);
        if (${entityLowerName} == null) {
            return ResultUtil.failure(FailureEnum.PARAMETER_FAILURE);
        }
        return ResultUtil.successOfUpdate(${entityLowerName});
    }

    /**
     *
     * 删除${table.comment}
     * @param ${entityLowerName}Dto
     * @param#if(${AccountToken}) httpServletRequest #elseif (${SysAccountToken}) token #else httpServletRequest #end
     * @return
     */
    @PostMapping("/delete")

    public Result delete(@RequestBody ${entity}Dto ${entityLowerName}Dto,#if(${AccountToken}) HttpServletRequest httpServletRequest#elseif(${SysAccountToken}) @Token SysAccountToken token#else HttpServletRequest httpServletRequest#end) {
        #if(${AccountToken})
        AccountToken token = getUserToken(httpServletRequest);
        #end
        ${entity} ${entityLowerName} = ${table.serviceName}.delete(${entityLowerName}Dto, token);
        if (${entityLowerName} == null) {
            return ResultUtil.failure(FailureEnum.PARAMETER_FAILURE);
        }
        return ResultUtil.successOfDelete(${entityLowerName});
    }

    /**
     *
     * 分页查询${table.comment}
     * @param ${entityLowerName}Dto
     * @return
     */
    @PostMapping("/queryPage")
    public Result queryPage(@RequestBody ${entity}Dto ${entityLowerName}Dto) {
        Page<${entity}> ${entityLowerName}Page = new Page<>(${entityLowerName}Dto.getPageIndex(), ${entityLowerName}Dto.getPageSize());
        IPage<${entity}> page = ${table.serviceName}.queryPage(${entityLowerName}Dto, ${entityLowerName}Page);
        return ResultUtil.success(page);
    }

    /**
     *
     * 根据id查询${table.comment}
     * @param ${entityLowerName}Dto
     * @return
     */
    @PostMapping("/queryById")
    public Result queryById(@RequestBody ${entity}Dto ${entityLowerName}Dto) {
        ${entity} ${entityLowerName} = ${table.serviceName}.getById(${entityLowerName}Dto.getId());
        if (${entityLowerName} == null) {
            return ResultUtil.failure(FailureEnum.PARAMETER_FAILURE);
        }
        return ResultUtil.success(${entityLowerName});
    }

    /**
     *
     * 导出
     * @param ${entityLowerName}Dto
     * @param response
     * @return
     */
    @PostMapping("/export")
    public Result export(@RequestBody ${entity}Dto ${entityLowerName}Dto, HttpServletResponse response) {

        boolean export = ${table.serviceName}.export(${entityLowerName}Dto, response);

        if (!export) {
        return ResultUtil.failure(FailureEnum.EXPORT_ERROR, null);
        }
        return null;
        }

}

#end