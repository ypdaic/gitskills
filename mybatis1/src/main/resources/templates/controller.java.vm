package ${package.Controller};


import org.springframework.web.bind.annotation.RequestMapping;

#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

import ${package.Service}.${table.serviceName};

import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.beans.factory.annotation.Autowired;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.apache.commons.lang3.StringUtils;

/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

    @Autowired
    ${table.serviceName} ${table.serviceName};

    /**
     *
     * 新增${table.comment}
     * @param ${entity}Dto
     * @param httpServletRequest
     * @return
     */
    @PostMapping("/add")
    public Result add(@RequestBody @Validated ${entity}Dto ${entity}Dto, BindingResult bindingResult, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            return paramError(bindingResult);
        }

        AccountToken token = getUserToken(httpServletRequest);
        ${entity} ${entity} = ${table.serviceName}.add(${entity}Dto, token);
        return ResultUtil.successOfInsert(${entity});
    }

    /**
     *
     * 修改${table.comment}
     * @param ${entity}Dto
     * @param httpServletRequest
     * @return
     */
    @PostMapping("/update")
    public Result update(@RequestBody @Validated ${entity}Dto ${entity}Dto, BindingResult bindingResult, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            return paramError(bindingResult);
        }
        AccountToken token = getUserToken(httpServletRequest);
        ${entity} ${entity} = ${table.serviceName}.update(${entity}Dto, token);
        if (${entity} == null) {
            return ResultUtil.failure(FailureEnum.PARAMETER_FAILURE);
        }
        return ResultUtil.successOfUpdate(${entity});
    }

    /**
     *
     * 删除${table.comment}
     * @param ${entity}Dto
     * @param httpServletRequest
     * @return
     */
    @PostMapping("/delete")
    public Result delete(@RequestBody ${entity}Dto ${entity}Dto, HttpServletRequest httpServletRequest) {
        AccountToken token = getUserToken(httpServletRequest);
        ${entity} ${entity} = ${table.serviceName}.delete(${entity}Dto, token);
        if (${entity} == null) {
            return ResultUtil.failure(FailureEnum.PARAMETER_FAILURE);
        }
        return ResultUtil.successOfDelete(${entity});
    }

    /**
     *
     * 分页查询${table.comment}
     * @param ${entity}Dto
     * @param httpServletRequest
     * @return
     */
    @PostMapping("/queryPage")
    public Result queryPage(@RequestBody ${entity}Dto ${entity}Dto, HttpServletRequest httpServletRequest) {
        Page<${entity}> ${entity}Page = new Page<>(${entity}Dto.getPageIndex(), ${entity}Dto.getPageSize());
        IPage<${entity}> page = ${table.serviceName}.queryPage(${entity}Dto, ${entity}Page);
        return ResultUtil.success(page);
    }

    /**
     *
     * 根据id查询${table.comment}
     * @param ${entity}Dto
     * @param httpServletRequest
     * @return
     */
    @PostMapping("/queryById")
    public Result queryById(@RequestBody ${entity}Dto ${entity}Dto, HttpServletRequest httpServletRequest) {
        ${entity} ${entity} = ${table.serviceName}.getById(${entity}Dto.getId());
        if (${entity} == null) {
            return ResultUtil.failure(FailureEnum.PARAMETER_FAILURE);
        }
        return ResultUtil.success(${entity});
    }

}

#end