<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>springcloud</artifactId>
        <groupId>com.daiyanping</groupId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>springcloud-provider2</artifactId>
    <packaging>jar</packaging>
    <name>springcloud-provider2</name>
    <version>0.0.1-SNAPSHOT</version>

    <profiles>
        <profile>
            <id>dev</id>
            <!--默认激活dev配置-->
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <env>dev</env>
            </properties>
            <!--如果properties很多，可以通过下面的方法进行加载,如果不存在配置文件
            则需要关闭该配置，否则编译不过-->
            <!--<build>-->
                <!--<filters>-->
                    <!--<filter>config-dev.properties</filter>-->
                <!--</filters>-->
            <!--</build>-->
        </profile>
        <profile>
            <id>test</id>
            <!--默认激活dev配置-->
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <env>test</env>
            </properties>
        </profile>
        <profile>
            <id>provider</id>
            <!--默认激活dev配置-->
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <env>provider</env>
            </properties>
        </profile>
    </profiles>

    <dependencies>
        <!--springboot web依赖-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <!--springboot test依赖-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <!--mybatisplus 依赖-->
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-boot-starter</artifactId>
        </dependency>
        <!--druid 数据源依赖-->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid-spring-boot-starter</artifactId>
        </dependency>
        <!--mysql 驱动依赖-->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>
        <!--mybatisplus 代码生成器依赖-->
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-generator</artifactId>
        </dependency>
        <!--mybatisplus 代码生成器模板依赖-->
        <dependency>
            <groupId>org.apache.velocity</groupId>
            <artifactId>velocity-engine-core</artifactId>
        </dependency>
        <!--lombok 依赖-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>
        <!--spring aop 支持-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>
        <dependency>
            <groupId>com.daiyanping</groupId>
            <artifactId>springcloud-api</artifactId>
            <version>0.0.1-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>com.daiyanping</groupId>
            <artifactId>springcloud-security</artifactId>
            <version>0.0.1-SNAPSHOT</version>
        </dependency>
        <!--<dependency>-->
            <!--<groupId>org.springframework.boot</groupId>-->
            <!--<artifactId>spring-boot-starter-security</artifactId>-->
        <!--</dependency>-->
        <!--euraka 依赖-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
    </dependencies>

    <build>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <!--filtering为ture,只会将被过滤的文件打到jar中，其他配置
                文件也想要打到jar包中，就必须在配置一个resource-->
                <filtering>true</filtering>
                <!--开启过滤，并对application.yml文件中包含${key}的配置
                将使用maven配置的值进行替换-->
                <includes>
                    <include>*-${env}.yml</include>
                    <include>application.yml</include>
                </includes>
            </resource>

            <resource>
                <directory>src/main/resources</directory>
                <!--filtering为false,表示不过滤文件，但需要排除掉上面我们需要
                过滤的文件-->
                <filtering>false</filtering>
                <excludes>
                   <exclude>*.yml</exclude>
                </excludes>
            </resource>
        </resources>

        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>